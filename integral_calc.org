* 1. The Concepts of Integral Calculus
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

#+NAME: round-tbl
#+BEGIN_SRC emacs-lisp :var tbl="" fmt="%.1f"
(mapcar (lambda (row)
          (mapcar (lambda (cell)
                    (if (numberp cell)
                        (format fmt cell)
                      cell))
                  row))
        tbl)
#+end_src

#+RESULTS: round-tbl

This chapter presents the Integral and some of its basic properties. In order to do this, we must have some acquaintance with functions. 

** The Basic Ideas of Cartesian Geometry 

The x coordinate of a point is sometimes called its abscissa and the y coordinate its ordinate. 

** Functions. Informal Description and Examples 

Today, the meaning of function is essentially this: Given two sets, X and Y, a function is a correspondence which associates with each element of X one element, and only one element of Y. In this example, X is the domain and Y is the range of the function. 

In calculus, we are primarily interested in functions whose domain and range are real numbers.

#+BEGIN_SRC R :file plot.svg :results graphics file
library(tidyverse)
library(pipeR)
library(patchwork)

identity_f <- function(x) x
abs_f <- function(x) abs(x)
factorial_f <- function(x) factorial(x)

reals <- seq(from = -10, 10, by = 1)
small_reals <- seq(-2.5, 2.5, .5)

plot_function <- function(fun, title = "", domain = reals) {
    require(latex2exp)
    domain %>%
        enframe() %>%
        ggplot() +
        geom_hline(yintercept = 0, alpha = 0.5) +
        geom_vline(xintercept = 0, alpha = 0.5) +
        geom_line(aes(x = value, y = fun(value)), color = "mediumpurple", lty = 1) +
        xlab("X") + ylab("Y") +
        ggdark::dark_theme_gray() +
        ggtitle(TeX(title))
}

# restricted domain factorial
plot_function(factorial_f, title = "f(x) = x!", domain = seq(from = 0, 10, by = 1)) -> p_fact

list("f(x) = x" = identity_f,
     "f(x) = |x|" = abs_f) %>%
    imap(., ~ plot_function(fun = .x, title = .y)) %>%
    append(list(p_fact)) %>% 
    reduce(`/`) 
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

Here are some properties of the absolute value function: 

1. $f(-x) = f(x)$
2. $f(x^2) = x^2$
3. $f(x + y) \leq f(x) + f(y)$
4. $f(f(x)) = f(x)$
5. $f(x) = \sqrt(x^2)$

** Functions. Formal Definition as a Set of Ordered Pairs 

*** Definition: Function

A function f is a set of ordered pairs (x, y) no two of which have the same first member 

It is customary to write $y = f(x)$ instead of $(x, y) \in f$ to indicate that the pair $(x, y)$ is in the set $f$

*** Theorem 1.1

Two functions f and g are equal iff
1. f and g have the same domain
2. f(x) = g(x) for every x in the domain of f 

** More Examples of Real Functions

#+BEGIN_SRC R :file plot.svg :results graphics file
constant_f <- function(x, c) c
constant_3 <- partial(constant_f, c = 3)
constant_3(1234)

linear_f <- function(x, a, b) a*x + b
linear_2x_1_f <- partial(linear_f, a = 2, b = -1)
linear_2x_1_f(2)

power_f <- function(x, power) x^power
power_2 <- partial(power_f, 2)
power_f(reals, 3)

polynomial_f <- function(x, degree, coefficients) {
    raise_f <- function(x) {
        x^(1:4)
    }
    map_dbl(x, ~ sum(rev(raise_f(.x)) * coefficients))
}
polynomial_ex <- partial(polynomial_f, degree = 4, coefficients = c((1/2), 0, -2, 0))

circle_f <- function(x, r) {
    if (abs(x) < r) sqrt(r^2 - x^2)
    else 0
}

circle_f <- function(x, r) {
    f <- function(x, r) sqrt(r^2 - x^2)
    g <- function(x, r) (-1) * sqrt(r^2 - x^2)
    
    x %>%
        enframe() %>%
        list(mutate(., output = f(value, r)),
             mutate(., output = g(value, r))) %>%
        rlist::list.skip(1) %>%
        bind_rows()
}

## circle plot
seq(-3.5, 3.5, 0.1) %>%
    circle_f(r = 3) %>%
    ggplot(aes(x = value, y = output)) +
    geom_point(alpha = 0.3) +
    geom_line(color = "mediumpurple") +
    ggtitle(TeX("Circle : y = +- \\sqrt{r^2 - x^2}")) +
    ggdark::dark_theme_gray() -> c_plot

## sum of functions plot
seq(-3.5, 3.5, 0.1) %>%
    enframe() %>%
    mutate(output_f = value * value) %>% 
    mutate(output_g = value * value * value) %>%
    mutate(output_sum = output_f + output_g) %>% 
    ggplot() +
    geom_line(aes(x = value, y = output_f), color = "mediumpurple") +
    geom_line(aes(x = value, y = output_g), color = "blue") +
    geom_line(aes(x = value, y = output_sum), color = "forestgreen") +
    ggtitle(TeX("Sum of Functions: f(x) = x^2 + g(x) = x^3")) +
    ggdark::dark_theme_gray() -> s_plot


list("Constant : f(x) = 3" = constant_3,
     "Linear : f(x) = 2x -1" = linear_2x_1_f,
     "Power : f(x) = x^2" = power_2,
     "Polynomial : f(x) = \\frac{1}{2} x^4 - 2 x^2" = polynomial_ex) %>%
    imap(~ plot_function(.x, .y, domain = small_reals)) %>%
    append(list(c_plot)) %>%
    append(list(s_plot)) %>% 
    reduce(`+`)
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

Exercise 6. 

#+BEGIN_SRC R :file plot.svg :results graphics file
f_fun <- function(x) {
    if (between(x, 0, 1)) 1
    else if (x > 1 & x <= 2) 2
    else 0
}

plot_function <- function(fun, title = "", domain = reals) {
    require(latex2exp)
    domain %>%
        enframe() %>%
        mutate(fun_out = flatten_dbl(map(value, f_fun))) %>>%
        (~ tbl) %>% 
        ggplot(aes(x = value, y = fun_out)) +
        geom_hline(yintercept = 0, alpha = 0.5) +
        geom_vline(xintercept = 0, alpha = 0.5) %>>%
        (~ base_plot) +
        geom_point(color = "mediumpurple") +
        geom_step(color = "forestgreen", lty = 3) +
        xlab("X") + ylab("Y") +
        ggdark::dark_theme_gray() +
        ggtitle(TeX(title))
}

## draw the graph of f
plot_function(f_fun, domain = small_reals)
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

On problem 6

#+BEGIN_SRC R :file plot.svg :results graphics file
## let g(x) = f(2x)
p1 <- plot_function(f_fun, domain = small_reals) + ggtitle("x") + xlim(0, 2)
p2 <- plot_function(f_fun, domain = (2 * small_reals)) + ggtitle("2x") + xlim(0, 2)
p3 <- plot_function(f_fun, domain = (small_reals - 2)) + ggtitle("x - 2") + xlim(0, 5)
p4 <- plot_function(f_fun, domain = ((small_reals * 2) + (small_reals - 2))) + ggtitle("f(2x) + f(x - 2)") + xlim(0, 5)

p1 / p2 / p3 / p4
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

#+BEGIN_SRC R :file plot.svg :results graphics file
small_reals %>%
    enframe() %>% 
    ggplot() +
    geom_line(aes(x = value, y = value), color = "forestgreen") +
    geom_line(aes(x = value, y = value * value * value), color = "mediumpurple") +
    geom_point(data = tribble(~ value, ~ out, 0, 0, -1, -1, 1, 1), aes(x = value, y = out), color = "white", shape = 1, size = 5) +
    ggdark::dark_theme_gray() +
    ggtitle("Intersection of f(x) = x and f(x) = x^3")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

#+BEGIN_SRC R :file plot.svg :results graphics file
small_reals %>%
    enframe() %>% 
    ggplot() +
    geom_line(aes(x = value, y = (value * value - 2)), color = "forestgreen") +
    geom_line(aes(x = value, y = (2 * (value * value) + 4 * value + 1)), color = "mediumpurple") +
    geom_point(data = tribble(~ value, ~ out, -1, -1), aes(x = value, y = out), color = "white", shape = 1, size = 5) +
    ggdark::dark_theme_gray() +
    ggtitle("Intersection of f(x) = x^2 - 2 and g(x) = 2x^2 + 4x + 1")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

** The Concept of Area as a Set Function

When we assign an area to a plane region, we associate a number with a set S in the plane. This means that we have a function a (an area function) which assigns a real number a(S) (the area of S) to each set S in some given collection of sets. A function of this kind, whose domain is a collection of sets and whose function values are real numbers, is called a set function. The basic problem is this: Given a plane set S, what area a(S) shall we assign to S? 

*** Axiomatic Definition of Area: 

We assume that there exists a class $\mathcal{M}$ of measurable sets in the plane and a set function $a$, whose domain is $\mathcal{M}$, with the following properties: 

1. Non-negative Property: For each set $S$ in $\mathcal{M}$, we have $a(S) \geq 0$
2. Additive Property: If $S$ and $T$ are in $\mathcal{M}$, then $S \cup T$ and $S \cap T$ are in $\mathcal{M}$, and we have $a(S \cup T) = a(S) + a(T) - a(S \cap T)$
3. Difference Property: If $S$ and $T$ are in $\mathcal{M}$, with $S \subseteq T$, then $T - S$ is in $\mathcal{M}$, and we have $a(T - S) = a(T) - a(S)$
   3.b: Monotone Property: Since $a(T - S) \geq 0$, $a(S) \leq a(T)$ for $S, T \in \mathcal{M}$ with $S \subseteq T$. 
4. Invariance Under Congruence: If a set $S$ is in $\mathcal{M}$ and it $T$ is congruent to $S$, then $T$ is also in $\mathcal{M}$ and we have $a(S) = a(T)$
5. Choice of Scale: Every rectangle $R$ is in $\mathcal{M}$. If the edges of $R$ have lengths $h$ and $k$, then $a(R) = hk$.
6. Exhaustion Property: Let $Q$ be a set that can be enclosed between two step regions $S$ and $T$, so that $S \subseteq Q \subseteq T$. If there is one and only one number $c$ which satisfies the inequalities $a(S) \leq c \leq a(T)$ for all step regions $S$ and $T$, then $Q$ is measurable and $a(Q) = c$. 

** Intervals and Ordinate Sets

Let $f$ be a nonnegative function whose domain is a closed interval $[a, b]$. The portion of the plane between the graph of $f$ and the x-axis is called the ordinate set of $f$. Ordinate sets are the geometric object whose areas we want to compute by means of the integral calculus. 

** Partitions and Step Functions 

*** Definition: Step Function

A function $s$, whose domain is a closed interval $[a, b]$, is called a step function if there is a partition $P = \{x_0, x_1, ..., x_n\}$ of $[a, b]$ such that $s$ is constant on each open subinterval of $P$. That is to say, for each $k = 1, 2, ..., n$ there is a real number $s_k$ such that $s(x) = s_k$ if $x_{k - 1} < x < x_k$

Note: At each of the endpoints $x_{k-1}$ and $x_k$ the function must have some well-defined value, but this need not be the same as $s_k$. 

For a given partition $P$ of $[a, b]$, we can always form a new partition $P'$ by adjoining more subdivision points to those already in $P$. Such a partition $P'$ is called a refinement of $P$ and is said to be finer than $P$. If a function is constant on the open subintervals of $P$, then it is also constant on the open subintervals of every refinement $P'$. 

** Sum and Product of Step Functions

New step functions may be formed from given step functions by adding corresponding function values. To show that $u$ is actually a step function, we must exhibit a partition $P$ such that $u$ is constant along the open subintervals of $P$. For the new partition $P$, we take all the points of $P_1$ along with $P_2$. This partition, $P_1 \cup P_2$ is called the common refinement of $P_1$ and $P_2$. 


#+BEGIN_SRC R :file plot.svg :results graphics file
library(tidyverse)
library(patchwork)

f <- function(x) {
    floor(x)
}

plot_sf <- function(domain, fun) {
    domain %>%
        enframe() %>%
        mutate(y_val = fun(value)) %>% 
        ggplot(aes(x = value, y = y_val)) +
        geom_step(direction = "h") +
        scale_x_continuous(breaks = 0:10)
}

plot_sf(seq(0, 10, 0.1), function(x) f(sqrt(x))) +
    ggtitle(latex2exp::TeX("$\\floor{\\sqrt{x}}$")) +
    ylim(0, 10) -> p1

plot_sf(seq(0, 10, 0.1), function(x) sqrt(f(x))) +
    ggtitle(latex2exp::TeX("$\\sqrt{f(x)}$")) +
    ylim(0, 10) -> p2

plot_sf(seq(0, 3, 0.1), function(x) f(x*x)) +
    ggtitle(latex2exp::TeX("$\\f{x^2}$")) +
    ylim(0, 10) -> p3

plot_sf(seq(0, 3, 0.1), function(x) f(x) * f(x)) +
    ggtitle(latex2exp::TeX("$\\floor{x}^2$")) +
    ylim(0, 10) -> p4

p1 + p2 + p3 + p4
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

** The Definition of the Integral for Step Functions

*** Definition: Integral of a Step Function 

Let $s$ be a step function defined on $[a, b]$ and let $P = \{x_0, x_1, ..., x_n\}$ be a partition of $[a, b]$ such that $s$ is constant on the open subintervals of $P$. Denote $s_k$ by the constant value that $s$ takes in the $k$th open subinterval, so that $s(x) = s_k$ if $x_{k-1} < x < x_k$, $k = 1, 2, ..., n$. 

The integral of $s$, from $a$ to $b$, denoted by the symbol $\int_a^b s(x) dx$, is defined by the following formula: 

$\int_a^b s(x) dx = \sum_{k = 1}^n s_k \cdot (x_k - x_{k-1})$

** Properties of the Integral of a Step Function 

*** Theorem 1.2 : Additive Property 

$\int_a^b [s(x) + t(x)]dx = \int_a^b s(x)dx + \int_a^b t(x) dx$ 

*** Theorem 1.3 : Homogenous Property 

For every real number $c$, we have $\int_a^b c \cdot s(x) dx = c \int_a^b t(x) dx$ 

*** Theorem 1.4 : Linearity Property 

For every real $c_1$ and $c_2$, we have 

$\int_a^b [c_1 s(x) + c_2 t(x)] dx = c_1 \int_a^b s(x) dx + c_2 \int_a^b t(x) dx$ 

*** Theorem 1.5 : Comparison Theorem 

If $s(x) < t(x)$ for every $x$ in $[a, b]$, then $\int_a^b s(x) dx < \int_a^b t(x) dx$ 

*** Theorem 1.6 : Additivity with Respect to the Interval of Integration 

$\int_a^c s(x) dx + \int_c^b s(x) dx = \int_a^b s(x) dx$ if $a < c < b$ 

*** Theorem 1.7 : Invariance Under Translation 

$\int_a^b s(x) dx = \int_{a + c}^{b + c} s(x - c) dx$ for every $c \in \mathcal{R}$

*** Theorem 1.8 : Expansion or Contraction of the Interval of Integration

$\int_{ka}^{kb} s(\frac{x}{k}) dx = k \int_a^b s(x) dx$ for every $k > 0$

*** Definition | Lower Limit > Upper Limit 

If $a < b$,, then $\int_b^a s(x) dx = - \int_a^b s(x) dx$ 

and $\int_a^a s(x) dx = 0$

*** Additivity with Respect to the Interval of Integration Rewrite 

$\int_a^c s(x) dx + \int_c^b s(x) dx + \int_b^a s(x) dx = 0$

*** Reflection Property of the Integral 

When considering theorem 1.8 and allowing k to be negative, we can get the reflection property of the integral when $k = -1$

$\int_a^b s(x) dx = \int_{-b}^{-a} s(-x) dx$

on exercise 16
